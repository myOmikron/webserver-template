/* tslint:disable */
/* eslint-disable */
/**
 * Frontend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
} from '../models/index';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
} from '../models/index';

export interface FinishAuthRequest {
    code: string;
    state: string;
}

/**
 * 
 */
export class OidcApi extends runtime.BaseAPI {

    /**
     * Handler for the OIDC endpoint the user will be redirected to from the OIDC provider
     * Handler for the OIDC endpoint the user will be redirected to from the OIDC provider
     */
    async finishAuthRaw(requestParameters: FinishAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling finishAuth().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling finishAuth().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/oidc/finish-auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Handler for the OIDC endpoint the user will be redirected to from the OIDC provider
     * Handler for the OIDC endpoint the user will be redirected to from the OIDC provider
     */
    async finishAuth(requestParameters: FinishAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.finishAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Handler for OIDC\'s login endpoint
     * Handler for OIDC\'s login endpoint
     */
    async startAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/oidc/start-auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Handler for OIDC\'s login endpoint
     * Handler for OIDC\'s login endpoint
     */
    async startAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startAuthRaw(initOverrides);
    }

}
